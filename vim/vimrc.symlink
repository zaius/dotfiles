" Pathogen is driving me crazy. If there is a `filetype on` in the system
" vimrc then it shits itself. There are a million people discussing it from
" 2010, when `filetype on` was included in debian default vimrc, and a patch
" was put in to fix it, but pathogen has removed all the workarounds since
" then. Wasted a day on trying to work out what is going on. Ditched it and
" went with vim-plug.
"
" vim-plug also lets me ditch git submodules, which is always a good thing.
"
" See: https://github.com/junegunn/vim-plug/wiki/faq#automatic-installation
if empty(glob('~/.vim/plugged'))
  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')
  Plug 'tmux-plugins/vim-tmux-focus-events'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'kchmck/vim-coffee-script'
  Plug 'mustache/vim-mustache-handlebars'
  Plug 'vim-ruby/vim-ruby'
  Plug 'airblade/vim-gitgutter'
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'
  Plug 'hdima/python-syntax'
  Plug 'derekwyatt/vim-scala'

  Plug 'othree/yajs.vim'
  Plug 'othree/es.next.syntax.vim'
  Plug 'cakebaker/scss-syntax.vim'
  Plug 'fatih/vim-go'
  Plug 'ekalinin/Dockerfile.vim'
call plug#end()

syntax enable

set background=dark
let base16colorspace=256
colorscheme base16-zaius
" Make sure vim knows I only use 256 color terminals now
" http://stackoverflow.com/questions/3761770/iterm-vim-colorscheme-not-working
let &t_Co=256

" http://stackoverflow.com/questions/5845557/in-a-vimrc-is-set-nocompatible-completely-useless
" set nocompatible
let mapleader = ","
inoremap jj <ESC>

set nosmartindent
set autoindent
set copyindent

" enable filetype detection:
filetype on
filetype plugin on
filetype indent on

" Get tabs to work well
set tabstop=2
set expandtab
set shiftwidth=2

" hilight tabs as errors
" syn match TAB_CHAR "\t"
" hi link TAB_CHAR Error

" I don't really know the difference between swap and backup - I just know I
" need something to stop losing unsaved files when my computer crashes.
" set backup
" set swapfile

" Trailing double slash means uses full path in filename to stop clashes in a
" global location.
set directory=~/.vim/swap//

" Use a persistent undo file instead
set undodir=~/.vim/undo//
set undofile

" relative line numbers to make whole line commands easier
set relativenumber

" Show a colored column at line 80
set colorcolumn=80

" Default to yanking to the system clipboard.
" Can use fakeclip if clipboard support isn't compiled in
" https://github.com/kana/vim-fakeclip
set clipboard=unnamed

" have command-line completion <Tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmode=list:longest,full

" display the current mode and partially-typed commands in the status line:
set showmode
set showcmd

" don't make it look like there are line breaks where there aren't:
set nowrap

" make searches case-insensitive, unless they contain upper-case letters:
set ignorecase
set smartcase

" show the `best match so far' as search strings are typed:
set incsearch
" Keep searches highlighted after the search is finished.
set hlsearch
" Clear the search highlight with leader slash
nnoremap <leader>/ :let @/=''<cr>

" allow <BkSpc> to delete line breaks, beyond the start of the current
" insertion, and over indentations:
set backspace=eol,start,indent

" Always have the status bar on
set laststatus=2
set ruler

" Bounce the cursor off the opposite brace
set showmatch

" Fix my inability to use shift properly
map :W :w
map :Q :q
map :T :t

" Allow saving of files as sudo when I forgot to start vim using sudo.
" http://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work
cmap w!! w !sudo tee > /dev/null %

if has("gui_macvim")
  " Don't show the macvim toolbar. Who uses a mouse anyway?!
  set go-=T
  set guifont=Inconsolata:h18.00
  set anti

  " Turn off bell. Macvim has no visual bell, so this does the same thing.
  set vb

  " Make Macvim fullscreen actually fill screen
  set fuoptions=maxvert,maxhorz
endif

" Tab navigation
" Can't use ctrl-J as it causes problems with newlines and neovim
" map <C-k> :tabp<CR>
" map <C-j> :tabn<CR>
nmap <C-S-tab> :tabprevious<CR>
nmap <C-tab> :tabnext<CR>
nmap <D-}> :tabnext<CR>
nmap <D-{> :tabprevious<CR>
" Have to use some ctrl based switching, otherwise switching tabs inside
" terminal vim is impossible
nmap <C-}> :tabnext<CR>
nmap <C-{> :tabprevious<CR>
nmap <C-t> :tabnew<CR>

imap <C-S-tab> <ESC>:tabprevious<CR>
imap <C-tab> <ESC>:tabnext<CR>
imap <D-}>  <ESC>:tabnext<CR>
imap <D-{> <ESC>:tabprevious<CR>
imap <C-}>  <ESC>:tabnext<CR>
imap <C-{> <ESC>:tabprevious<CR>
imap <C-t> <ESC>:tabnew<CR>
" can't use ctrl-w because it clashes with windows :(
" map <C-w> :tabclose<cr>
" And C-[ is used in place of escape in a bunch of places. Could probably get
" around this by changing the window title setting stuff.
" nmap <C-[> :tabprevious<cr>
" nmap <C-]> :tabnext<cr>

" Easier non-interactive command insertion
nnoremap <Space> :


" Leader commands - so much cooler than function keys
map <leader>p :set paste!<CR>:set paste?<CR>
map <Leader>a :Ack<space>

" Strip ending whitespace with ,W
func! ClearTrailingWhitespace()
  %s/\s\+$//ge
  let @/=''
endfunc

nnoremap <leader>w :call ClearTrailingWhitespace()<cr>
autocmd BufWrite :call ClearTrailingWhitespace()<cr>

" Format XML with xmllint with ,x
:vmap <Leader>x !xmllint --nonet --nowarning --nowrap --html --format -<CR>
:nmap <Leader>x !!xmllint --nonet --nowarning --nowrap --html --format -<CR>

" Format json with ,j
:vmap <Leader>j !python -m json.tool <CR>
:nmap <Leader>j !!python -m json.tool <CR>

" I only use nerd comments for toggling. Disable all other shortcuts.
let g:NERDCreateDefaultMappings = 0
map <leader>c <plug>NERDCommenterToggle
vmap <leader>c <plug>NERDCommenterToggle

" Set the screen window title to hold the currently edited file
" TODO: this is broken in console vim - keeps inserting the ESC in the current
" files
" let &titlestring = "vim(" . expand("%:t") . ")"
" set t_ts=\<ESC>k
" set t_fs=\<ESC>\
" set titleold=""
" set title
set notitle

" This really needs a lot of work.
"  * Can't work out how to exclude deleted files.
"  * A project's gitignore file isn't nescessarily the same as the ctrl-p
"    ignore list. E.g. secrets.yml. How can we do per-project excludes?
"
" One option is to write a script which can list the relevant files. Then can
" have an ignore global similar to git's global gitignore.
" http://superuser.com/questions/649714/can-i-get-the-vim-ctrlp-plugin-to-ignore-a-specific-folder-in-one-project
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files --cached --other --exclude-standard']
let g:ctrlp_custom_ignore='_site$\|tmp/cache'

" Save when any change is made. Try kick my habit of hitting :w every two seconds
" autocmd CursorMoved,CursorHold,InsertLeave,BufLeave,FocusLost * silent! wall

" http://superuser.com/questions/558876
" autocmd BufEnter * sign define dummy
" autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')

" Ideally...
" autocmd filetype python source ~/.vim/pydoc.vim
autocmd FileType python setlocal tabstop=4 shiftwidth=4
" autocmd FileType python set foldmethod=indent

" Markdown
autocmd BufNewFile,BufRead *.md set filetype=markdown
let g:vim_markdown_folding_disabled=1

" New line (with `o`) in a markdown list shouldn't indent
let g:vim_markdown_new_list_item_indent = 0

highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
