call pathogen#infect()

syntax enable
colorscheme ir_black
set nocompatible
let mapleader = ","
inoremap jj <ESC>

set smartindent
set autoindent
set copyindent

" enable filetype detection:
filetype on
filetype plugin on
filetype indent on

" Get tabs to work well
set tabstop=2
set expandtab
set shiftwidth=2

" hilight tabs as errors
" syn match TAB_CHAR "\t"
" hi link TAB_CHAR Error

" No need for swap files.
set nobackup
set noswapfile

if version >= 703
  " Use a persistent undo file instead
  set undodir=~/.vim/undo
  set undofile

  " relative line numbers to make whole line commands easier
  set relativenumber

  " Show a colored column at line 80
  set colorcolumn=80
endif

" have command-line completion <Tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmode=list:longest,full

" display the current mode and partially-typed commands in the status line:
set showmode
set showcmd

" don't make it look like there are line breaks where there aren't:
set nowrap

" make searches case-insensitive, unless they contain upper-case letters:
set ignorecase
set smartcase

" show the `best match so far' as search strings are typed:
set incsearch
" Keep searches highlighted after the search is finished.
set hlsearch
" Clear the search highlight with leader slash
nnoremap <leader>/ :let @/=''<cr>

" allow <BkSpc> to delete line breaks, beyond the start of the current
" insertion, and over indentations:
set backspace=eol,start,indent

" Always have the status bar on
set laststatus=2
set ruler

" Bounce the cursor off the opposite brace
set showmatch

" Fix my inability to use shift properly
map :W :w
map :Q :q
map :T :t

if has("gui_macvim")
  " Don't show the macvim toolbar. Who uses a mouse anyway?!
  set go-=T
  set guifont=Inconsolata:h18.00
  set anti

  " Make Macvim fullscreen actually fill screen
  set fuoptions=maxvert,maxhorz
endif

" Tab navigation
map <C-k> :tabp<CR>
map <C-j> :tabn<CR>
nmap <C-S-tab> :tabprevious<cr>
nmap <C-tab> :tabnext<cr>
imap <C-S-tab> <ESC>:tabprevious<cr>i
imap <C-tab> <ESC>:tabnext<cr>i
nmap <C-t> :tabnew<cr>
imap <C-t> <ESC>:tabnew<cr>i
" can't use ctrl-w because it clashes with windows :(
" map <C-w> :tabclose<cr>
" And C-[ is used in place of escape in a bunch of places. Could probably get
" around this by changing the window title setting stuff.
" nmap <C-[> :tabprevious<cr>
" nmap <C-]> :tabnext<cr>

" Easier non-interactive command insertion
nnoremap <Space> :

" Ruby shortcuts. Maybe should put these into a specific ruby file. My
" vim-config-fu isn't strong enough yet.
imap <C-l> <Space>=><Space>'


" Leader commands - so much cooler than function keys
map <leader>p :set paste!<CR>:set paste?<CR>
map <Leader>, :NERDTreeToggle<cr>
map <Leader>a :Ack<space>

" Strip ending whitespace with ,W
func! ClearTrailingWhitespace()
  %s/\s\+$//ge
  let @/=''
endfunc

nnoremap <leader>w :call ClearTrailingWhitespace()<cr>
autocmd BufWrite :call ClearTrailingWhitespace()<cr>

" Format XML with xmllint with ,x
:vmap <Leader>x !xmllint --format -<CR>
:nmap <Leader>x !!xmllint --format -<CR>

" I only use nerd comments for toggling. Disable all other shortcuts.
let g:NERDCreateDefaultMappings = 0
map <leader>c <plug>NERDCommenterToggle
vmap <leader>c <plug>NERDCommenterToggle

" Set the screen window title to hold the currently edited file
let &titlestring = "vim(" . expand("%:t") . ")"
if &term == "screen"
  set t_ts=k
  set t_fs=\
endif
if &term == "screen" || &term == "xterm"
  set title
endif

" Save when any change is made. Try kick my habit of hitting :w every two seconds
autocmd CursorMoved,CursorHold,InsertLeave,BufLeave,FocusLost * silent! wall
