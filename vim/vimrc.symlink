" See: https://github.com/junegunn/vim-plug/wiki/faq#automatic-installation
if empty(glob('~/.vim/plugged'))
  autocmd VimEnter * PlugInstall
endif

let g:ale_use_global_executables = 1

let g:ale_python_pylint_executable = 'python3'
let g:ale_python_pylint_options = '--rcfile /Users/zaius/code/beyond/server/.pylintrc'
" let g:ale_python_pylint_use_global = 0
let g:ale_fixers = {
\ 'javascript': ['prettier', 'eslint'],
\ 'scss': ['prettier'],
\}
let g:ale_linters = {
\ 'javascript': ['eslint'],
\ 'python': ['pylint'],
\}
let g:ale_linters_explicit = 1

let g:ale_javascript_prettier_use_local_config = 0

let g:ale_javascript_eslint_use_global = 1
let g:ale_javascript_eslint_executable = '/usr/local/bin/eslint'
let g:ale_javascript_eslint_options = '--config /Users/zaius/code/beyond/client/.eslintrc.js'

let g:ale_javascript_prettier_use_global = 1
let g:ale_javascript_prettier_executable = '/usr/local/bin/prettier'
let g:ale_javascript_prettier_options = '--config /Users/zaius/code/beyond/client/.prettierrc.js'

let g:ale_fix_on_save = 1
let g:ale_use_global_executables = 1


call plug#begin('~/.vim/plugged')
  Plug 'tmux-plugins/vim-tmux-focus-events'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'mustache/vim-mustache-handlebars'
  " Plug 'vim-ruby/vim-ruby'
  Plug 'airblade/vim-gitgutter'
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'
  Plug 'derekwyatt/vim-scala'

  " Plug 'Chiel92/vim-autoformat'

  " Noted performance issues in their readme. Trying something else.
  " Plug 'othree/yajs.vim'
  " Plug 'othree/es.next.syntax.vim'
  Plug 'pangloss/vim-javascript'
  Plug 'cakebaker/scss-syntax.vim'
  Plug 'fatih/vim-go'
  Plug 'ekalinin/Dockerfile.vim'

  Plug 'nathanaelkane/vim-indent-guides'

  " Python plugins
  " http://www.liuchengxu.org/posts/use-vim-as-a-python-ide/
  Plug 'w0rp/ale'
  Plug 'ambv/black', { 'tag': '18.9b0' }
  " Plug 'tmhedberg/SimpylFold'
  " Causing me serious issues on first completion load
  " Plug 'davidhalter/jedi-vim'

  " Extremely slow...
  " Plug 'posva/vim-vue'

  " Better session management on crashes
  " Plug 'xolox/vim-misc'
  " Plug 'xolox/vim-session'

  " Themes
  Plug 'sheerun/vim-wombat-scheme'
call plug#end()

syntax enable

" Newer neovim has true color
if has('nvim-0.1.5')
    set termguicolors
endif

set background=dark
" Make sure vim knows I only use 256 color terminals now
" http://stackoverflow.com/questions/3761770/iterm-vim-colorscheme-not-working
let &t_Co=256
colorscheme wombat

" http://stackoverflow.com/questions/5845557/in-a-vimrc-is-set-nocompatible-completely-useless
" set nocompatible
let mapleader = ","
inoremap jj <ESC>

set nosmartindent
set autoindent
set copyindent

" enable filetype detection:
filetype on
filetype plugin on
filetype indent on

" Get tabs to work well
set tabstop=2
set expandtab
set shiftwidth=2

" hilight tabs as errors
" syn match TAB_CHAR "\t"
" hi link TAB_CHAR Error

" I don't really know the difference between swap and backup - I just know I
" need something to stop losing unsaved files when my computer crashes.
" set backup
" set swapfile

" Trailing double slash means uses full path in filename to stop clashes in a
" global location.
set directory=~/.vim/swap//

" Use a persistent undo file instead
set undodir=~/.vim/undo//
set undofile

" relative line numbers to make whole line commands easier
set relativenumber

" Show a colored column at line 88
set colorcolumn=88
set textwidth=88

" Default to yanking to the system clipboard.
" Can use fakeclip if clipboard support isn't compiled in
" https://github.com/kana/vim-fakeclip
set clipboard=unnamed

" have command-line completion <Tab> (for filenames, help topics, option names)
" first list the available options and complete the longest common part, then
" have further <Tab>s cycle through the possibilities:
set wildmode=list:longest,full

" display the current mode and partially-typed commands in the status line:
set showmode
set showcmd

" don't make it look like there are line breaks where there aren't:
set nowrap

" make searches case-insensitive, unless they contain upper-case letters:
set ignorecase
set smartcase

" show the `best match so far' as search strings are typed:
set incsearch
" Keep searches highlighted after the search is finished.
set hlsearch
" Clear the search highlight with leader slash
nnoremap <leader>/ :let @/=''<cr>

" allow <BkSpc> to delete line breaks, beyond the start of the current
" insertion, and over indentations:
set backspace=eol,start,indent

" Always have the status bar on
set laststatus=2
set ruler

" Bounce the cursor off the opposite brace
set showmatch

" Fix my inability to use shift properly
"https://stackoverflow.com/questions/117150/can-i-remap-ex-commands-in-vim
command WQ wq
command Wq wq
command W w
command Q q
" ca WQ wq

" Allow saving of files as sudo when I forgot to start vim using sudo.
" http://stackoverflow.com/questions/2600783/how-does-the-vim-write-with-sudo-trick-work
cmap w!! w !sudo tee > /dev/null %

if has("gui_macvim")
  " Don't show the macvim toolbar. Who uses a mouse anyway?!
  set go-=T
  set guifont=Fira\ Code:h18
  set anti

  " Turn off bell. Macvim has no visual bell, so this does the same thing.
  set vb

  " Make Macvim fullscreen actually fill screen
  set fuoptions=maxvert,maxhorz
endif

" Tab navigation
" Can't use ctrl-J as it causes problems with newlines and neovim
" map <C-k> :tabp<CR>
" map <C-j> :tabn<CR>

nmap <C-t> :tabnew<CR>
imap <C-t> <ESC>:tabnew<CR>

nmap <S-D-}> :tabnext<CR>
imap <S-D-}> <ESC>:tabnext<CR>
nmap <S-D-{> :tabprevious<CR>
imap <S-D-{> <ESC>:tabprevious<CR>

nmap <C-S-tab> :tabprevious<CR>
imap <C-S-tab> <ESC>:tabprevious<CR>
nmap <C-tab> :tabnext<CR>
imap <C-tab> <ESC>:tabnext<CR>

nmap <D-]> :tabnext<CR>
imap <D-]> <ESC>:tabnext<CR>
nmap <D-[> :tabprevious<CR>
imap <D-[> <ESC>:tabprevious<CR>

" nmap <C-]> :tabnext<CR>
" imap <C-]> <ESC>:tabnext<CR>
" nmap <C-[> :tabprevious<CR>
" imap <C-[> <ESC>:tabprevious<CR>

" Alacritty neovim
nmap <F3> :tabnew<CR>
imap <F3> <ESC>:tabnew<CR>

nmap <F2> :tabnext<CR>
imap <F2> <ESC>:tabnext<CR>
nmap <F1> :tabprevious<CR>
imap <F1> <ESC>:tabprevious<CR>

" Easier non-interactive command insertion
nnoremap <Space> :


" Leader commands - so much cooler than function keys
map <leader>p :set paste!<CR>:set paste?<CR>
map <Leader>a :Ack<space>

" Strip ending whitespace with ,W
func! ClearTrailingWhitespace()
  %s/\s\+$//ge
  let @/=''
endfunc

nnoremap <leader>w :call ClearTrailingWhitespace()<cr>
autocmd BufWrite :call ClearTrailingWhitespace()<cr>

" Format XML with xmllint with ,x
:vmap <Leader>x !xmllint --nonet --nowarning --nowrap --html --format -<CR>
:nmap <Leader>x !!xmllint --nonet --nowarning --nowrap --html --format -<CR>

" Format json with ,j
:vmap <Leader>j !python3 -m json.tool <CR>
:nmap <Leader>j !!python3 -m json.tool <CR>

set notitle

" This really needs a lot of work.
"  * Can't work out how to exclude deleted files.
"  * A project's gitignore file isn't nescessarily the same as the ctrl-p
"    ignore list. E.g. secrets.yml. How can we do per-project excludes?
"
" One option is to write a script which can list the relevant files. Then can
" have an ignore global similar to git's global gitignore.
" http://superuser.com/questions/649714/can-i-get-the-vim-ctrlp-plugin-to-ignore-a-specific-folder-in-one-project
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files --cached --other --exclude-standard']
let g:ctrlp_custom_ignore='_site$\|tmp/cache'

" http://superuser.com/questions/558876
" autocmd BufEnter * sign define dummy
" autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')

" Ideally...
" autocmd filetype python source ~/.vim/pydoc.vim
autocmd FileType python setlocal tabstop=4 shiftwidth=4
autocmd FileType python set foldmethod=indent
" default is tcq in python
" help fo-table for info
autocmd FileType python set formatoptions=cqnrblj
set foldlevel=99
let g:python3_host_prog = '/usr/local/bin/python3'
let g:black_fast = 1
let g:black_skip_string_normalization = 1
let g:black_linelength = 88
autocmd BufWritePre *.py execute ':Black'

" Javascript
" default is croql
autocmd FileType javascript set formatoptions=cqnrblj

" Markdown
autocmd BufNewFile,BufRead *.md set filetype=markdown
let g:vim_markdown_folding_disabled=1

" New line (with `o`) in a markdown list shouldn't indent
let g:vim_markdown_new_list_item_indent = 0


highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
