# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

export PATH=$HOME/.dotfiles/bin:/usr/local/sbin:/usr/local/bin:$PATH
export TZ=/usr/share/zoneinfo/America/Los_Angeles
export platform=$(uname)

# Need extended glob for excluding undo files in the following `for`. Don't
# know if I want it yet. Could be replaced with find.
setopt extendedglob

# source every .zsh file in this rep
# Don't source any file with undo in the name - this stops sourcing of vim
# undo files.
for config_file ($ZSH/**/*.zsh~*undo*) source $config_file

if [[ $platform == 'Darwin' ]]; then
  export EDITOR="mvim -f"
elif [[ $platform == 'Linux' ]]; then
  export EDITOR=vim
fi

# Fix SSH agent forwarding in screen / tmux
source  ~/.ssh/grabssh

# precmd is called just before the prompt is printed
precmd () { title 'zsh' }
# preexec is called just before any command line is executed
preexec () {
  title $1
  source $HOME/.ssh/fixssh
}

export PAGER=less

# ZSH "helpfully" sets your bindkey to vim mode when you set the editor to vim.
bindkey -e
# Stop the terminal from sending its own ctrl-w
stty werase undef
# Note that zsh doesn't use readline - is uses its own lib called zle. This
# makes zle's backward-kill-word consistent with readline's .
export WORDCHARS=''
# Can also keep use zle's vi mode kill word, which has saner defaults.
# bindkey '^W' vi-backward-kill-word

# history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory notify

setopt HIST_VERIFY
setopt SHARE_HISTORY # share history between sessions ???
setopt EXTENDED_HISTORY # add timestamps to history
setopt APPEND_HISTORY # adds history
setopt INC_APPEND_HISTORY SHARE_HISTORY  # adds history incrementally and share it across sessions
setopt HIST_IGNORE_ALL_DUPS  # don't record dupes in history
setopt HIST_REDUCE_BLANKS



check_virtualenv() {
  if [ -e .venv/bin/activate ]; then
    if [ ! $VIRTUAL_ENV ]; then
      echo "Found .venv in directory. Starting virtualenv"
      source .venv/bin/activate
    fi
  else
    if [ $VIRTUAL_ENV ]; then
      echo "Deactivating virtual env"
      deactivate
    fi
  fi
}
venv_cd () {
  builtin cd "$@" && check_virtualenv
}

# Python
if which python > /dev/null; then
  export PYTHONSTARTUP=~/.pythonrc
  alias cd="venv_cd"
  # If cwd is a venv, enter it immediately
  check_virtualenv
fi


if which python3 > /dev/null; then
  # export PYTHONPATH=$(brew --prefix)/lib/python3.4/site-packages
fi

# rbenv
# Make sure rbenv is linked to a new openssl (and readline?)
# CONFIGURE_OPTS="--with-openssl-dir=`brew --prefix openssl`" rbenv install 1.9.3-p194
if which rbenv > /dev/null; then
  eval "$(rbenv init - --no-rehash)"
  export PATH=~/.rbenv/shims:$PATH
fi

# Ruby
# If I need more rubies, look at something more lightweight than rvm / rbenv
# https://github.com/postmodern/chruby
if which ruby > /dev/null; then
  export PATH=$(ruby -e 'puts Gem.bindir'):$PATH
fi

# Node
if which npm > /dev/null; then
  export PATH=/usr/local/share/npm/bin:$PATH
  export NODE_PATH="/usr/local/share/npm/lib/node_modules"
fi

# Java
# export PATH=/Library/Java/Home/bin:$PATH

# Perl
if [[ -d /usr/local/perlbrew ]]; then
  # export PERLBREW_ROOT=/usr/local/perlbrew
  # export PATH=\$PATH:/usr/local/perlbrew/bin
  # source /usr/local/perlbrew/etc/bashrc
fi
